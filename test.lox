
fun bruh_1()
{
    var a = "global a";
    var b = "global b";
    var c = "global c";
    {
      var a = "outer a";
      var b = "outer b";
      {
        var a = "inner a";
        print a;
        print b;
        print c;
      }
      print a;
      print b;
      print c;
    }
    print a;
    print b;
    print c;
}

fun bruh_2(a, b)
{
    //var a = 0;
    //var b = 1;

    while (a < 10000) {
      print a;
      var temp = a;
      a = b;
      b = temp + b;
    }
}


//print clock();
//print sin(3.14159);

fun surf_wave_1()
{
    // my "surf sine" test for basic programming language functions :D 
    var i = 0;
    var line = "";
    while (i < 100)
    {
        // wave 1 
        var j = 0;
        var uhh = sin(i/17); // placed here so we dont compute it an extra 40 times per line
        while (j < 20 + 20 * uhh)
        {
            line = line + "~";
            j = j + 1;
        }

        // wave 2 
        var k = 0;
        var soy = sin(i/7); 
        while (k < 20 + 20 * soy)
        {
            line = line + "~";
            k = k + 1;
        }

        print line;
        line = "";
        i = i + 1;
    }
}

fun sayHi(first, last) 
{
  print "Hi, " + first + " " + last + "!";
}

sayHi("Dear", "Reader");

surf_wave_1();

print bruh_2(0,1);

print surf_wave_1;

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

fun fac(n)
{
    if (n == 0) return 1;
    return n * fac(n-1);
}

fun makeCounter() {
  var i = 0; // so this works like a "static" variable in a fn 
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}

class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream; // Prints "DevonshireCream".

class Bagel {}
var bagel = Bagel();
print bagel; // Prints "Bagel instance".


class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

Bacon().eat();



class Thing {
  getCallback() {
    fun localFunction() {
      print this;
    }

    return localFunction;
  }
}

var callback = Thing().getCallback();
callback();


class Cake {
  taste() {
    var adjective = "delicious";
    print "The " + this.flavor + " cake is " + adjective + "!";
  }
}

var cake = Cake();
cake.flavor = "German chocolate";
cake.taste(); 


class Doughnut {
  cook() {
    print "Fry until golden brown.";
  }
}

class BostonCream < Doughnut {
  cook() {
    super.cook();
    print "Pipe full of custard and coat with chocolate.";
  }
}

BostonCream().cook();